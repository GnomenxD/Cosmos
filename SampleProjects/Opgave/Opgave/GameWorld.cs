using CosmosFramework;
using CosmosFramework.CoreModule;
using CosmosFramework.InputModule;
using CosmosFramework.Tweening;
using OpenAI_API;
using Opgave.Blueprint;
using System.Collections.Generic;
using System.Reflection;

namespace Opgave
{

	public class Fact : StaticObject<Fact>
	{
		public static int GetValue()
		{
			return 100;
		}
	}

	public class GameWorld : Game
	{
		private Fact fact;

		OpenAIAPI openAi;
		public override void Initialize()
		{
			//openAi = new OpenAIAPI("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");
		}

		private List<BlueprintBase> blueprints = new List<BlueprintBase>();

		private void Add<T>() where T : BlueprintBase
		{
			PropertyInfo info = typeof(T).GetProperty("Instance", BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy);
			if(info == null)
			{
				Debug.Log($"Could not find correct singleton of type({typeof(T).Name}).", LogFormat.Error);
				return;
			}
			T instance = (T)info.GetValue(null, null);
			blueprints.Add(instance);
		}

		public override void Start()
		{
			Add<PlayerShipBlueprint>();
			Add<EnemyShipBlueprint>();

			for (int i = 0; i < 10; i++)
			{
				blueprints[1].InstantiatePrefab(Random.Position() * 2.5f, 0.0f, null);
			}

			input = new KeyboardInput();
		}

		private KeyboardInput input;

		public override void Update()
		{
			Debug.QuickLog(input);

			if(InputManager.GetKeyDown(Keys.Enter))
			{
				if(input.Enabled)
				{
					string prompt = input.Read();
					Request(prompt, 0.1);
					Request(prompt, 0.5);
					Request(prompt, 0.9);
				}
				else
				{
					input.Begin();
				}
			}
		}

		private async void Request(string s, double tmp)
		{
			CompletionRequest request = new CompletionRequest(s, model: Model.DavinciText, max_tokens: 8, temperature: tmp);
			var result = await openAi.Completions.CreateCompletionAsync(request);
			Debug.Log($"Result [{tmp:F2}]: {result.ToString()}");
			System.Console.WriteLine(result.ToString());
		}

		//Text based social deduction game.

		//One player creates a prompt.

		//Each player must submit an answer to this prompt.

		//An AI of different complexity will provide their answer.

		//Players must then figure out which of the answers were generated by an AI.

		//Get points for each player you fool.

		//Get points in increasing amount if you guess the AI generated prompt.

		//Is this even fun - it could be too easy?


		//Image based social deduction game.

		//One player creates a prompt.

		//AI will then generate an image from that prompt.

		//Taking turns, all players will try to fool other players.

		//(If possible): AI will generate a prompt from the image to try and fool players.

		//Players get points for fooling others with their prompt and if they guess correctly.


		//Dungeon Crawler - Dragons Lair

		//Mostly text based ... (Could create graphics to compliment with the story)

		//Small 1-4 player party

		//Random encounters with different choices.

		//Could be a co-op against the machine.
	}


}