using CosmosFramework;
using CosmosFramework.CoreModule;
using CosmosFramework.InputModule;
using CosmosFramework.Tweening;
using OpenAI_API;
using Opgave.Blueprints;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using System.Threading.Tasks;

namespace Opgave
{
	public class GameWorld : Game
	{

		private OpenAIAPI openAi;
		public override void Initialize()
		{
			openAi = new OpenAIAPI("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");
		}
		public override void Start()
		{
			int[] values = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
			Debug.LogTable(values[8..]);
			input = new KeyboardInput();

			Item item = new Item();
			var product = new { item.name, item.price };
		}

		public class Item
		{
			public string name;
			public int price;
		}

		private KeyboardInput input;

		public override async void Update()
		{
			Debug.QuickLog(input);

			if(InputManager.GetKeyDown(Keys.Enter))
			{
				if(input.Enabled)
				{
					string prompt = input.Read();
					Console.WriteLine($"Prompt: {prompt}");
					await Request(prompt, Model.AdaText, 0.9);
					await Request(prompt, Model.BabbageText, 0.9);
					await Request(prompt, Model.CurieText, 0.9);
					await Request(prompt, Model.DavinciText, 0.9);
				}
				else
				{
					input.Begin();
				}
			}
		}

		//One player creates a prompt.

		//Each player must submit an answer to this prompt.

		//An AI of different models will provide their answer.

		//Players must then figure out which of the answers were generated by an AI.

		//Get points for each player you fool.

		//Get points in increasing amount if you guess the AI generated prompt.

		//Is this even fun - it could be too easy?

		private async Task Request(string s, Model model, double tmp)
		{
			CompletionRequest request = new CompletionRequest(s, model: model, max_tokens: 40, temperature: tmp);
			var result = await openAi.Completions.CreateCompletionAsync(request);
			Debug.Log($"Result [{tmp:F2}, {model.ModelID}]: {result.ToString()}\n");
			Console.WriteLine(result.ToString());
		}
	}


}