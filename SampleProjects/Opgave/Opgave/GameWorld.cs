using CosmosFramework;
using CosmosFramework.CoreModule;
using CosmosFramework.InputModule;
using CosmosFramework.Tweening;
using OpenAI_API;
using Opgave.Blueprints;
using System;
using System.Reflection;

namespace Opgave
{
	public class GameWorld : Game
	{
		OpenAIAPI openAi;
		public override void Initialize()
		{
			openAi = new OpenAIAPI("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");
		}
		public override void Start()
		{
			input = new KeyboardInput();
		}

		private KeyboardInput input;

		public override void Update()
		{
			Debug.QuickLog(input);

			if(InputManager.GetKeyDown(Keys.Enter))
			{
				if(input.Enabled)
				{
					string read = input.Read();
					GetAiResult(read, 0.0);
					GetAiResult(read, 0.5);
					GetAiResult(read, 1.0);
				}
				else
				{
					input.Begin();
				}
			}
		}

		//One player creates a prompt.

		//Each player must submit an answer to this prompt.

		//An AI of different models will provide their answer.

		//Players must then figure out which of the answers were generated by an AI.

		//Get points for each player you fool.

		//Get points in increasing amount if you guess the AI generated prompt.

		//Is this even fun - it could be too easy?

		private async void GetAiResult(string s, double tmp)
		{
			CompletionRequest request = new CompletionRequest(s, model: Model.DavinciText, max_tokens: 8, temperature: tmp);
			var result = await openAi.Completions.CreateCompletionAsync(request);
			Debug.Log($"Result [{tmp:F2}]: {result.ToString()}");
			Console.WriteLine(result.ToString());
		}
	}


}